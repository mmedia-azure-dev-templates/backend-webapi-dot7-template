// <auto-generated />
using System;
using Boilerplate.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Boilerplate.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("2022124212104_AbpTables")]
    partial class AbpTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("web")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Boilerplate.Domain.Entities.Article", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Abrevia")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("Brand")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cost")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<bool?>("Discontinued")
                        .HasColumnType("boolean");

                    b.Property<string>("Meta")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id")
                        .HasName("Articles_Id_pkey");

                    b.ToTable("Articles", "web");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Catalog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("CatalogId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("Parent")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("Catalogs_Id_pkey");

                    b.HasIndex("CatalogId");

                    b.ToTable("Catalogs", "web", t =>
                        {
                            t.HasComment("TABLA MAESTRA CATALOGO DEL SISTEMA CONTIENE DE TODO CONFIGURACIONES");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CatCivilStatus")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("CatNacionality")
                        .HasColumnType("integer");

                    b.Property<int?>("CatTypeDocument")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Ndocument")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("Supervisor")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UbcCanton")
                        .HasColumnType("integer");

                    b.Property<int?>("UbcParroquia")
                        .HasColumnType("integer");

                    b.Property<int?>("UbcProvincia")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Contacts_Id_pkey");

                    b.HasIndex(new[] { "Name" }, "Contacts_Name_idx");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "Contacts_Name_idx"), new[] { "varchar_pattern_ops" });

                    b.HasIndex(new[] { "Ndocument" }, "Contacts_Ndocument_key")
                        .IsUnique();

                    b.HasIndex(new[] { "SurName" }, "Contacts_SurName_idx");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "SurName" }, "Contacts_SurName_idx"), new[] { "varchar_pattern_ops" });

                    b.ToTable("Contacts", "web", t =>
                        {
                            t.HasComment("TABLA DONDE SE ALMACENAN LOS CLIENTES");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Counter", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomCounter")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Counters_Id_pkey");

                    b.ToTable("Counters", "web", t =>
                        {
                            t.HasComment("TABLA DE CONTADORES DE ORDENES DEL SISTEMA");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.GeographicLocation", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("GeographicLocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Parent")
                        .HasColumnType("integer");

                    b.Property<short>("Parroquia")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("GeographicLocation_Id_pkey");

                    b.HasIndex("GeographicLocationId");

                    b.ToTable("GeographicLocation", "web", t =>
                        {
                            t.HasComment("TABLA CON LA DISTRIBUCION GEOGR�FICA DEL ECUADOR PROVINCIAS, CANTONES, PARROQUIAS");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Hero", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("HeroType")
                        .HasColumnType("integer");

                    b.Property<string>("Individuality")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<string>("Team")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Heroes", "web");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Identification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Address");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<int?>("CatCivilStatus")
                        .HasColumnType("integer")
                        .HasColumnName("CatCivilStatus");

                    b.Property<int?>("CatGender")
                        .HasColumnType("integer")
                        .HasColumnName("CatGender");

                    b.Property<int>("CatNacionality")
                        .HasColumnType("integer")
                        .HasColumnName("CatNacionality");

                    b.Property<int>("CatTypeDocument")
                        .HasColumnType("integer")
                        .HasColumnName("CatTypeDocument");

                    b.Property<string>("CurriculumUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CurriculumUrl");

                    b.Property<DateOnly?>("DepartureDate")
                        .HasColumnType("date")
                        .HasColumnName("DepartureDate");

                    b.Property<DateOnly?>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnName("EntryDate");

                    b.Property<short>("Hired")
                        .HasColumnType("smallint")
                        .HasColumnName("Hired");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("ImgUrl");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Mobile");

                    b.Property<string>("Ndocument")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("Ndocument")
                        .HasDefaultValueSql("'0'::bpchar");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Notes");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Phone");

                    b.Property<int?>("UbcCanton")
                        .HasColumnType("integer")
                        .HasColumnName("UbcCanton");

                    b.Property<int?>("UbcParroquia")
                        .HasColumnType("integer")
                        .HasColumnName("UbcParroquia");

                    b.Property<int?>("UbcProvincia")
                        .HasColumnType("integer")
                        .HasColumnName("UbcProvincia");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("Identifications_Id");

                    b.HasIndex(new[] { "Ndocument" }, "Identifications_Ndocument_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "Identifications_UserId_key")
                        .IsUnique();

                    b.ToTable("Identifications", "web", t =>
                        {
                            t.HasComment("TABLA HACE JOIN CON TABLA USERS AQUI SE ALMACENA LOS DATOS INFORMATIVOS DEL USUARIO");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Inscription", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Agreement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Applicant")
                        .HasColumnType("integer");

                    b.Property<string>("Information")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("InscriptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("Inscriptions_Id_pkey");

                    b.HasIndex(new[] { "Applicant" }, "Inscriptions_Applicant_key")
                        .IsUnique();

                    b.ToTable("Inscriptions", "web");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.InventoryDoc", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("InventoryDocs_Id_pkey");

                    b.HasIndex(new[] { "Code" }, "InventoryDocs_Code_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Description" }, "InventoryDocs_Description_key")
                        .IsUnique();

                    b.ToTable("InventoryDocs", "web", t =>
                        {
                            t.HasComment("TABLA DONDE SE ALMACENA EL INVENTARIO DE LOS DOCUMENTOS REQUERIDOS EN LAS ORDENES");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Agreegment")
                        .HasColumnType("integer");

                    b.Property<int?>("Assigned")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)")
                        .HasDefaultValueSql("0.00");

                    b.Property<decimal>("CashAdvance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)")
                        .HasDefaultValueSql("0.00");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Credit")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<string>("Dispatch")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Documentation")
                        .HasColumnType("jsonb");

                    b.Property<string>("Enterprise")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Extras")
                        .HasColumnType("text");

                    b.Property<DateOnly>("GeneratedDate1")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("GeneratedDate2")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("GeneratedHour1")
                        .HasColumnType("time without time zone");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Iva")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)")
                        .HasDefaultValueSql("0.00");

                    b.Property<string>("Notes")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Observations")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("PaidState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<int?>("PaidUser")
                        .HasColumnType("integer");

                    b.Property<char?>("PaidUserType")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<char?>("PersonType")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<int?>("State")
                        .HasColumnType("integer");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)")
                        .HasDefaultValueSql("0.00");

                    b.Property<int?>("Term")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)")
                        .HasDefaultValueSql("0.00");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("Orders_Id_pkey");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "OrderNumber" }, "Orders_OrderNumber_key")
                        .IsUnique();

                    b.ToTable("Orders", "web");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Postulant", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CatCivilStatus")
                        .HasColumnType("integer");

                    b.Property<int>("CatNacionality")
                        .HasColumnType("integer");

                    b.Property<int>("CatTypeDocument")
                        .HasColumnType("integer");

                    b.Property<bool?>("Contacted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurriculumUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Ndocument")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("118");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UbcCanton")
                        .HasColumnType("integer");

                    b.Property<int>("UbcParroquia")
                        .HasColumnType("integer");

                    b.Property<int>("UbcProvincia")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Postulants_Id_pkey");

                    b.HasIndex(new[] { "Email" }, "Postulants_Email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Ndocument" }, "Postulants_Ndocument_key")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "Postulants_UserName_key")
                        .IsUnique();

                    b.ToTable("Postulants", "web", t =>
                        {
                            t.HasComment("POSTULANTES AQUI SE GUARDAN LAS PERSONAS QUE SE REGISTRAN EN EL SISTEMA");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .HasColumnType("text");

                    b.Property<decimal?>("Total")
                        .HasPrecision(14, 2)
                        .HasColumnType("numeric(14,2)");

                    b.Property<decimal?>("Weigth")
                        .HasPrecision(14, 1)
                        .HasColumnType("numeric(14,1)");

                    b.HasKey("Id")
                        .HasName("Products_Id_pkey");

                    b.HasIndex(new[] { "OrderId" }, "Products_OrderId_idx");

                    b.ToTable("Products", "web", t =>
                        {
                            t.HasComment("TABLA DE LOS PRODUCTOS ASOCIADO A UNA ORDEN");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(0) without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<short>("IsActive")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastLoginIp")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValueSql("'NULL::character varying'::character varying");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RememberToken")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValueSql("'NULL::character varying'::character varying");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Users_Id_pkey");

                    b.HasIndex(new[] { "Email" }, "Users_Email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Users_Name_idx");

                    b.HasIndex(new[] { "SurName" }, "Users_SurName_idx");

                    b.HasIndex(new[] { "UserName" }, "Users_UserName_key")
                        .IsUnique();

                    b.ToTable("Users", "web", t =>
                        {
                            t.HasComment("EN ESTA TABLA SE GUARDAN LOS USUARIOS DEL SISTEMA");
                        });
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Catalog", b =>
                {
                    b.HasOne("Boilerplate.Domain.Entities.Catalog", null)
                        .WithMany("InverseParent")
                        .HasForeignKey("CatalogId");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.GeographicLocation", b =>
                {
                    b.HasOne("Boilerplate.Domain.Entities.GeographicLocation", null)
                        .WithMany("InverseParent")
                        .HasForeignKey("GeographicLocationId");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Identification", b =>
                {
                    b.HasOne("Boilerplate.Domain.Entities.User", "User")
                        .WithOne("Identification")
                        .HasForeignKey("Boilerplate.Domain.Entities.Identification", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Order", b =>
                {
                    b.HasOne("Boilerplate.Domain.Entities.Contact", "Contact")
                        .WithMany("Orders")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Orders_ContactId_fk");

                    b.HasOne("Boilerplate.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.GeographicLocation", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Boilerplate.Domain.Entities.User", b =>
                {
                    b.Navigation("Identification");
                });
#pragma warning restore 612, 618
        }
    }
}
